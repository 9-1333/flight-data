{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"뉴욕 비행장 데이터 분석\"\n",
        "subtitle: \"권서연, 김민채, 박재원, 오상원\"\n",
        "author: \"7조\"\n",
        "format: \n",
        "  revealjs:\n",
        "    highlight-style: gruvbox\n",
        "    incremental: true  \n",
        "    # logo: logo.png\n",
        "    css: styles.css\n",
        "    title-slide-attributes: \n",
        "      data-background-image: \"assets/title-bg.gif\"\n",
        "      data-background-size: cover\n",
        "    slide-attributes:\n",
        "      data-background-image: \"assets/bg.png\"\n",
        "      data-background-size: cover\n",
        "jupyter: python3\n",
        "---\n",
        "\n",
        "\n",
        "------------------------------------------------------------------------\n",
        "\n",
        "## 목차 {data-background-image=\"assets/bg.png\"}\n",
        "\n",
        ":::: {style=\"padding-left: 3rem !important;\"}\n",
        "::: incremental\n",
        "1.  데이터 설명\\\n",
        "2.  분석 목표\\\n",
        "3.  항공편 지연 분석\n",
        "    -   시간대별\\\n",
        "    -   계절별\\\n",
        "    -   날씨별\\\n",
        "4.  항공기 특성 분석\n",
        "    -   엔진 개수에 따른 특수성\\\n",
        "    -   생산 년도와 엔진 개수\n",
        ":::\n",
        "::::\n",
        "\n",
        "------------------------------------------------------------------------\n",
        "\n",
        "## 데이터셋 정보 {data-background-image=\"assets/bg.png\"}\n"
      ],
      "id": "edadc03e"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "from nycflights13 import flights, planes, weather"
      ],
      "id": "2b2c0f02",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "![](https://docs.ropensci.org/dittodb/articles/relational-nycflights.svg)\n",
        "\n",
        "::: {style=\"margin-top: 1rem; padding-left: 1rem; padding-bottom: 1.6rem;\"}\n",
        "<li style=\"font-size: 1.6rem; margin-top: 5px; font-family: Pretendard !important;\">\n",
        "\n",
        "데이터 구성: 2013년 뉴욕에서 출발한 모든 항공편의 운항 데이터\n",
        "\n",
        "</li>\n",
        "\n",
        "<li style=\"font-size: 1.6rem; margin-top: 5px; font-family: Pretendard !important;\">\n",
        "\n",
        "포함된 정보: 항공사, 공항, 날씨, 항공기 메타데이터 포함\n",
        "\n",
        "</li>\n",
        "\n",
        "<li style=\"font-size: 1.6rem; margin-top: 5px; font-family: Pretendard !important;\">\n",
        "\n",
        "분석 대상: `flights`, `planes`, `weather` 중심\n",
        "\n",
        "</li>\n",
        ":::\n",
        "\n",
        "------------------------------------------------------------------------\n",
        "\n",
        "## 분석 목표 {data-background-image=\"assets/bg.png\"}\n",
        "\n",
        "## 1. 시간대별 지연 분석 {data-background-image=\"assets/bg.png\"}\n"
      ],
      "id": "50c0bd58"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| code-fold: false\n",
        "#| echo: true\n",
        "def divide_hour(hour):\n",
        "    if 6 <= hour < 12:\n",
        "        return 'morning'\n",
        "    if 12 <= hour < 18:\n",
        "        return 'lunch'\n",
        "    if 18 <= hour < 24:\n",
        "        return 'dinner'\n",
        "    return 'dawn'\n",
        "\n",
        "flights['time_of_day'] = flights['hour'].apply(divide_hour)\n",
        "result = flights.loc[:, ['hour', 'time_of_day']].head(3)"
      ],
      "id": "c23a0222",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "::::::: columns\n",
        ":::: {.column width=\"50%\"}\n",
        "::: {style=\"padding-bottom: 1rem;\"}\n",
        "-   설명: 출발 시간을 시간대별로 분류\n",
        "-   분류 기준: 새벽, 아침, 점심, 저녁\n",
        "-   [목적: 각 시간대별 지연 패턴 분석]{style=\"color: #ef4444\"}\n",
        ":::\n",
        "::::\n",
        "\n",
        ":::: {.column width=\"50%\"}\n",
        "::: {style=\"padding-top: 2rem;\"}"
      ],
      "id": "e5ab0c79"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "print(result)"
      ],
      "id": "aa28064c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "::::\n",
        ":::::::\n",
        "\n",
        "## 1. 시간대별 지연 분석 {data-background-image=\"assets/bg.png\"}\n",
        "\n",
        ":::::: columns\n",
        "::: {.column width=\"50%\"}"
      ],
      "id": "4df68763"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| eval: false\n",
        "#| echo: true\n",
        "times = flights.groupby(['time_of_day']).size()\n",
        "plt.bar(['dawn', 'morning', 'lunch', 'dinner'], \n",
        "        times.values[[0, 3, 2, 1]])\n",
        "plt.xlabel('time')\n",
        "plt.ylabel('flights')\n",
        "plt.title('flights by time')\n",
        "plt.show()"
      ],
      "id": "5e526860",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        ":::: {.column width=\"50%\"}\n",
        "::: {style=\"padding-top: 0px; padding-left: 2rem;\"}"
      ],
      "id": "f9f2dd37"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| eval: true\n",
        "#| echo: false\n",
        "times = flights.groupby(['time_of_day']).size()\n",
        "plt.figure(figsize=(5, 3))\n",
        "plt.bar(['dawn', 'morning', 'lunch', 'dinner'], \n",
        "        times.values[[0, 3, 2, 1]])\n",
        "plt.xlabel('time')\n",
        "plt.ylabel('flights')\n",
        "plt.title('flights by time')\n",
        "plt.show()"
      ],
      "id": "582bb176",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "<li>새벽에는 항공편 수가 거의 X</li>\n",
        "\n",
        "<li>아침과 점심에 가장 많음</li>\n",
        "\n",
        "<li>저녁시간에는 항공편 수 감소</li>\n",
        ":::\n",
        "::::\n",
        "\n",
        "<p style=\"margin-top: 5rem;\">\n",
        "\n",
        "-   [아침, 점심에 지연이 많겠지?]{style=\"color: #ef4444; font-style: italic;\"}\n",
        "\n",
        "</p>\n",
        "::::::\n",
        "\n",
        "## 1. 시간대별 지연 분석 {data-background-image=\"assets/bg.png\"}\n",
        "\n",
        "<h6 style=\"font-size:26px; padding-top: 0px; color: #374151 !important;\">\n",
        "\n",
        "15분 이상 지연된 비행기들 살펴보기\n",
        "\n",
        "</h6>\n",
        "\n",
        "::::: columns\n",
        "::: {.column width=\"50%\"}"
      ],
      "id": "ce0ad128"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| code-fold: true\n",
        "#| echo: true\n",
        "colors = [\"#a1a1aa\", \"#FF9999\",\"#a1a1aa\", \"#FF9999\"]\n",
        "times = flights.groupby(['time_of_day']).size()\n",
        "plt.figure(figsize=(5, 3))\n",
        "plt.bar(['dawn', 'morning', 'lunch', 'dinner'], \n",
        "        times.values[[0, 3, 2, 1]],\n",
        "        color=colors)\n",
        "plt.xlabel('time')\n",
        "plt.ylabel('flights')\n",
        "plt.title('flights by time')\n",
        "plt.show()"
      ],
      "id": "0bbd7582",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "<li>[비행편 수]{style=\"margin-left: 2rem;\"}</li>\n",
        ":::\n",
        "\n",
        "::: {.column width=\"50%\"}"
      ],
      "id": "9e6ec822"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| code-fold: true\n",
        "#| echo: true\n",
        "\n",
        "# 15분 이상 지연된 비행기들\n",
        "delayed = flights.loc[flights['dep_delay'] >= 15, :]\n",
        "\n",
        "# 지연된 비행기 시간대별로 분류\n",
        "delay_cnt = delayed.groupby('time_of_day').size()\n",
        "plt.figure(figsize=(5, 3))\n",
        "plt.bar(['dawn', 'morning', 'lunch', 'dinner'],\n",
        "       delay_cnt.values[[0, 3, 2, 1]],\n",
        "       color=colors)\n",
        "plt.xlabel('time')\n",
        "plt.ylabel('delayed flights')\n",
        "plt.title('delay by time')\n",
        "plt.show()"
      ],
      "id": "a2170fac",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "<li>[지연된 비행기 수]{style=\"margin-left: 2rem;\"}</li>\n",
        ":::\n",
        "\n",
        "-   [ㅇㅇㅇㅇ]{style=\"position: absolute; top: 100;\"}\n",
        ":::::\n",
        "\n",
        "## 항공기 특성 분석\n",
        "\n",
        "## 1. 엔진 개수와 좌석수의 관계 {data-background-image=\"assets/bg.png\"}\n",
        "\n",
        "-   **가설: 엔진 개수가 많을수록 여객기가 크고, 좌석수가 많아질 것이다**\n",
        "\n",
        "### 1️⃣​ 엔진 개수`engines`별 평균 좌석수`seats` 확인하기\n"
      ],
      "id": "d9038f15"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| code-fold: false\n",
        "#| echo: true\n",
        "data = pd.merge(flights, planes, on = \"tailnum\", how = \"left\")\n",
        "\n",
        "engines_seats = data.groupby('engines')['seats'].mean()\n",
        "engines_seats"
      ],
      "id": "f07afdbe",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "------------------------------------------------------------------------\n",
        "\n",
        "### 1️⃣-2​ 꺾은선 그래프로 시각화 {data-background-image=\"assets/bg.png\"}\n",
        "\n",
        ":::::: columns\n",
        "::: {.column width=\"50%\"}"
      ],
      "id": "448add1e"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| eval: false\n",
        "#| echo: true\n",
        "\n",
        "# 꺾은선 그래프 그리기\n",
        "plt.figure(figsize=(5, 5))\n",
        "plt.plot(engines_seats.index, engines_seats.values,\n",
        "        marker='o', linestyle='-', color='b')\n",
        "\n",
        "# 각 점에 라벨 추가\n",
        "for x, y in engines_seats.items():\n",
        "    plt.text(x + (0.1 if x == 1.0 else -0.4), y,\n",
        "           ## 엔진 한 개일 때는 x+0.1 좌표에\n",
        "           ## 나머지는 x-0.4 좌표에 위치\n",
        "           f\"{y:.1f}\", fontsize=10, color=\"black\")\n",
        "\n",
        "# 축과 제목 설정\n",
        "plt.xticks(engines_seats.index) \n",
        "plt.xlabel(\"Number of Engines\")\n",
        "plt.ylabel(\"Average Seats\")\n",
        "plt.title(\"Average Seats by Number of Engines\")\n",
        "plt.grid(True, linestyle=\"--\", alpha=0.7)\n",
        "\n",
        "plt.show()"
      ],
      "id": "f7acd94b",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        ":::: {.column width=\"50%\"}\n",
        "::: {style=\"padding-top: 0px; padding-left: 2rem;\"}"
      ],
      "id": "369a51d1"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| eval: true\n",
        "#| echo: false\n",
        "# 꺾은선 그래프 그리기\n",
        "plt.figure(figsize=(5, 5))\n",
        "plt.plot(engines_seats.index, engines_seats.values, marker='o', linestyle='-', color='b')\n",
        "\n",
        "## 각 점에 라벨 추가\n",
        "for x, y in engines_seats.items():\n",
        "    plt.text(x + (0.1 if x == 1.0 else -0.4), y, f\"{y:.1f}\", fontsize=10, color=\"black\")\n",
        "\n",
        "## 축과 제목 설정\n",
        "plt.xticks(engines_seats.index) \n",
        "plt.xlabel(\"Number of Engines\")\n",
        "plt.ylabel(\"Average Seats\")\n",
        "plt.title(\"Average Seats by Number of Engines\")\n",
        "plt.grid(True, linestyle=\"--\", alpha=0.7)\n",
        "\n",
        "plt.show()\n"
      ],
      "id": "03367b39",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "::::\n",
        "::::::\n",
        "\n",
        "------------------------------------------------------------------------\n",
        "\n",
        "### 1️⃣-2​ 꺾은선 그래프로 시각화 {data-background-image=\"assets/bg.png\"}\n",
        "\n",
        ":::::: columns\n",
        "::: {.column width=\"50%\"}\n",
        "-   꺾은선 그래프에서 엔진 개수가 4개일 때 좌석 수가 급감↘️​하는 패턴\n",
        "\n",
        "-   특정 값들의 영향을 받은 건지 원래 이런 패턴인지 확인해볼 필요가 있음\n",
        "\n",
        "-   `박스 플롯(Box Plot)`으로 좌석 수의 분포를 살펴보자!\n",
        ":::\n",
        "\n",
        ":::: {.column width=\"50%\"}\n",
        "::: {style=\"padding-top: 0px; padding-left: 2rem;\"}"
      ],
      "id": "5f1e2fe7"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| eval: false\n",
        "#| echo: true\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "plt.figure(figsize=(5, 5))\n",
        "plt.plot(engines_seats.index, engines_seats.values, marker='o', linestyle='-', color='b')\n",
        "\n",
        "# 각 점에 라벨 추가 (엔진 4개는 빨간색 강조)\n",
        "for x, y in engines_seats.items():\n",
        "    color = \"red\" if x == 4 else \"black\"  # 엔진 4개일 때 빨간색\n",
        "    ha = 'left' if x == 1.0 else 'right'\n",
        "    plt.text(x + (0.1 if x == 1.0 else -0.4), y, f\"{y:.1f}\", fontsize=10, color=color)\n",
        "\n",
        "# 배경 강조 (엔진 4개 주변)\n",
        "plt.axvspan(3.35, 4.0, color='red', alpha=0.15)\n",
        "\n",
        "# 축과 제목 설정\n",
        "plt.xticks(engines_seats.index)\n",
        "plt.xlabel(\"Number of Engines\")\n",
        "plt.ylabel(\"Average Seats\")\n",
        "plt.title(\"Average Seats by Number of Engines\")\n",
        "plt.grid(True, linestyle=\"--\", alpha=0.7)\n",
        "\n",
        "plt.show()\n"
      ],
      "id": "6b55ae31",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "::::\n",
        "::::::\n",
        "\n",
        "------------------------------------------------------------------------\n",
        "\n",
        "### 2️⃣​ 박스 플롯으로 엔진 개수별 분포 확인 {data-background-image=\"assets/bg.png\"}\n",
        "\n",
        "::::: columns\n",
        "::: {.column width=\"50%\" style=\"margin-top: 15px;\"}"
      ],
      "id": "669ee94b"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| eval: false\n",
        "#| echo: true\n",
        "\n",
        "plt.figure(figsize=(6, 5))\n",
        "sns.boxplot(x=\"engines\", y=\"seats\", data=data,\n",
        "       hue=\"engines\", palette=\"Blues\", width=0.5)\n",
        "plt.xlabel(\"Number of Engines\")\n",
        "plt.ylabel(\"Seats\")\n",
        "plt.title(\"Seats Distribution by Number of Engines\")\n",
        "plt.grid(axis=\"y\", linestyle=\"--\", alpha=0.7)\n",
        "plt.show()"
      ],
      "id": "bdd82795",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "-   엔진 개수가 3개, 4개일 때 박스플롯의 형태가 이상함\n",
        "\n",
        "    -   \n",
        "\n",
        "<li>왜 이렇게 나타나는지, `산점도(Scatter Plot)`를 추가해 개별 데이터 분포를 더 자세히 확인해보자!</li>\n",
        ":::\n",
        "\n",
        "::: {.column width=\"50%\"}"
      ],
      "id": "0a1e956f"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| eval: true\n",
        "#| echo: false\n",
        "\n",
        "plt.figure(figsize=(6, 5))\n",
        "sns.boxplot(x=\"engines\", y=\"seats\", data=data, hue=\"engines\", palette=\"Blues\", width=0.5)\n",
        "plt.xlabel(\"Number of Engines\")\n",
        "plt.ylabel(\"Seats\")\n",
        "plt.title(\"Seats Distribution by Number of Engines\")\n",
        "plt.grid(axis=\"y\", linestyle=\"--\", alpha=0.7)\n",
        "plt.show()"
      ],
      "id": "309ff6a0",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        ":::::\n",
        "\n",
        "------------------------------------------------------------------------\n",
        "\n",
        "### 2️⃣-2​ 박스 플롯에 스캐터 플롯 추가 {data-background-image=\"assets/bg.png\"}\n",
        "\n",
        "::::: columns\n",
        "::: {.column width=\"50%\" style=\"margin-top: 15px;\"}"
      ],
      "id": "82965cff"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| eval: false\n",
        "#| echo: true\n",
        "\n",
        "plt.figure(figsize=(6, 5))\n",
        "sns.boxplot(x=\"engines\", y=\"seats\", data=data,\n",
        "       hue=\"engines\", palette=\"Blues\", width=0.5)\n",
        "\n",
        "# 엔진 3개, 4개짜리만 따로 필터링해서 산점도 추가\n",
        "sns.stripplot(x=\"engines\", y=\"seats\",\n",
        "            data=data[(data[\"engines\"] >= 3)], \n",
        "            color=\"red\", alpha=0.5,\n",
        "            jitter=0.1, size=6)\n",
        "            ## jitter: x값이 같은 데이터를 한 줄로 표시\n",
        "\n",
        "# 라벨 & 스타일 설정\n",
        "plt.xlabel(\"Number of Engines\")\n",
        "plt.ylabel(\"Seats\")\n",
        "plt.title(\"Seats Distribution by Number of Engines\")\n",
        "plt.grid(axis=\"y\", linestyle=\"--\", alpha=0.7)\n",
        "\n",
        "plt.show()"
      ],
      "id": "e98bec2d",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "::: {.column width=\"50%\"}"
      ],
      "id": "a885ca1f"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| eval: true\n",
        "#| echo: false\n",
        "\n",
        "plt.figure(figsize=(6, 5))\n",
        "sns.boxplot(x=\"engines\", y=\"seats\", data=data, hue=\"engines\", palette=\"Blues\", width=0.5)\n",
        "\n",
        "# 엔진 3개, 4개짜리만 따로 필터링해서 산점도 추가\n",
        "sns.stripplot(x=\"engines\", y=\"seats\",\n",
        "            data=data[(data[\"engines\"] >= 3)], \n",
        "            color=\"red\", alpha=0.5,\n",
        "            jitter=0.1, size=6)\n",
        "            ## jitter: x값이 같은 데이터를 한 줄로 표시\n",
        "\n",
        "# 라벨 & 스타일 설정\n",
        "plt.xlabel(\"Number of Engines\")\n",
        "plt.ylabel(\"Seats\")\n",
        "plt.title(\"Seats Distribution by Number of Engines\")\n",
        "plt.grid(axis=\"y\", linestyle=\"--\", alpha=0.7)\n",
        "\n",
        "plt.show()"
      ],
      "id": "a616934c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        ":::::\n",
        "\n",
        "------------------------------------------------------------------------\n",
        "\n",
        "### 2️⃣-3​ 박스 플롯, 스캐터 플롯 해석하기 {data-background-image=\"assets/bg.png\"}\n",
        "\n",
        "#### ✅ 엔진 3개, 4개에서 박스플롯이 이상하게 보인 이유\n",
        "\n",
        "#### ✅ 엔진 3개, 4개에서 박스플롯이 이상하게 보인 이유\n",
        "\n",
        "::::: columns\n",
        "::: {.column width=\"50%\" style=\"margin-top: 15px;\"}\n",
        "-   ✅ 엔진 3개, 4개에서 박스플롯이 이상하게 보인 이유\n",
        "\n",
        "    -   데이터 개수가 너무 적어서 사분위수를 나누기 어려움\n",
        "\n",
        "        -   박스가 생성되지 않고, 데이터가 선처럼 보임\n",
        "\n",
        "    -   \n",
        "\n",
        "-   엔진 3개 : 좌석 수 400명 넘는 항공기 vs 0\\~10명짜리 항공기 같이 존재\n",
        "\n",
        "    -   극단적인 차이!\n",
        "\n",
        "-   엔진 4개 : 처음 가설(엔진 수가 많을수록 좌석수가 많다)에 따르면 박스플롯이 위쪽에 분포해 있어야 되는데,\n",
        "\n",
        "    박스플롯이 예상보다 아래쪽에 위치함 (좌석수의 중앙값과 대부분의 데이터가 0-100명에 집중됨)\n",
        "\n",
        "    산점도를 보면 0-10명 규모, 100명 규모, 380명 규모에 몰려있음\n",
        ":::\n",
        "\n",
        "::: {.column width=\"50%\"}"
      ],
      "id": "6ebb5ae2"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| eval: true\n",
        "#| echo: false\n",
        "\n",
        "plt.figure(figsize=(6, 5))\n",
        "sns.boxplot(x=\"engines\", y=\"seats\", data=data, hue=\"engines\", palette=\"Blues\", width=0.5)\n",
        "\n",
        "# 엔진 3개, 4개짜리만 따로 필터링해서 산점도 추가\n",
        "sns.stripplot(x=\"engines\", y=\"seats\",\n",
        "            data=data[(data[\"engines\"] >= 3)], \n",
        "            color=\"red\", alpha=0.5,\n",
        "            jitter=0.1, size=6)\n",
        "            ## jitter: x값이 같은 데이터를 한 줄로 표시\n",
        "\n",
        "# 라벨 & 스타일 설정\n",
        "plt.xlabel(\"Number of Engines\")\n",
        "plt.ylabel(\"Seats\")\n",
        "plt.title(\"Seats Distribution by Number of Engines\")\n",
        "plt.grid(axis=\"y\", linestyle=\"--\", alpha=0.7)\n",
        "\n",
        "plt.show()"
      ],
      "id": "4df85e69",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        ":::::"
      ],
      "id": "c20d9559"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\USER\\AppData\\Roaming\\Python\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}